기능 변경!! : get_time 시간전송X ==> js
보안은... 굳이?

Flask: 완성
Node: 시작
Wsam: 보류

1. 개요 및 특징
프레임워크/기술	특징	주요 사용처
Flask	Python 기반의 가벼운 웹 프레임워크. 싱글 스레드 처리 방식(기본 WSGI).	빠른 프로토타이핑, 소규모 API 서버, 머신러닝 백엔드
Node.js	JavaScript 기반 런타임. 비동기 이벤트 기반 처리로 높은 동시성 지원.	실시간 애플리케이션, 대규모 웹 서버, REST API
WebAssembly(WSAM)	웹에서 네이티브 코드(C, C++, Rust 등) 실행 가능. 성능 최적화에 특화.	성능이 중요한 웹 애플리케이션, 게임, 이미지/영상 처리

2. 성능 비교
기준	Flask (Python)	Node.js	WebAssembly
처리 속도	느림 (Python 인터프리터, 싱글 스레드)	빠름 (비동기 I/O, 이벤트 기반)	매우 빠름 (네이티브 성능)
동시성(Concurrency)	낮음 (기본적으로 싱글 스레드)	높음 (논블로킹 I/O)	높음 (멀티스레딩 지원 가능)
메모리 사용량	중간	높음 (V8 엔진이 메모리를 많이 사용)	낮음 (최적화 가능)
확장성	중간 (WSGI 대신 ASGI 사용 시 개선 가능)	높음 (클러스터링 및 분산 처리 지원)	높음 (최적화 및 네이티브 확장 가능)
실시간 처리	약함	강함 (웹소켓, 이벤트 루프)	강함 (빠른 연산 가능)

3. 결론
Flask: 간단한 API 서버나 소규모 프로젝트에는 적합하지만, 고성능이 필요한 애플리케이션에는 부적합.
Node.js: 실시간 처리 및 대규모 서비스에 적합. 이벤트 기반이므로 고성능을 요구하는 웹 애플리케이션에 강점.
WebAssembly: 웹 애플리케이션 내에서 고속 연산이 필요한 경우(게임, 멀티미디어 처리)에 적합. 하지만 백엔드보다는 클라이언트 측 성능 개선이 주요 목표.